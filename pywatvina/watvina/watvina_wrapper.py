# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
##########################
# WATVina beta version    #
###########################

"""


import sys
if sys.platform.find("linux") != -1:
    dlflags = sys.getdlopenflags()
    import ctypes
    sys.setdlopenflags(dlflags | ctypes.RTLD_GLOBAL)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _watvina_wrapper
else:
    import _watvina_wrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



if sys.platform.find("linux") != -1:
    sys.setdlopenflags(dlflags)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _watvina_wrapper.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _watvina_wrapper.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _watvina_wrapper.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _watvina_wrapper.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _watvina_wrapper.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _watvina_wrapper.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _watvina_wrapper.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _watvina_wrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _watvina_wrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _watvina_wrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _watvina_wrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _watvina_wrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _watvina_wrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _watvina_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _watvina_wrapper:
_watvina_wrapper.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _watvina_wrapper.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _watvina_wrapper.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _watvina_wrapper.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _watvina_wrapper.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _watvina_wrapper.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _watvina_wrapper.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _watvina_wrapper.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _watvina_wrapper.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _watvina_wrapper.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _watvina_wrapper.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _watvina_wrapper.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _watvina_wrapper.IntVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _watvina_wrapper.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _watvina_wrapper.IntVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.IntVector_swiginit(self, _watvina_wrapper.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _watvina_wrapper.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _watvina_wrapper.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _watvina_wrapper.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _watvina_wrapper.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _watvina_wrapper.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _watvina_wrapper.IntVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_IntVector

# Register IntVector in _watvina_wrapper:
_watvina_wrapper.IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.UnsignedIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.UnsignedIntVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _watvina_wrapper.UnsignedIntVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _watvina_wrapper.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _watvina_wrapper.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _watvina_wrapper.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.UnsignedIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _watvina_wrapper.UnsignedIntVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _watvina_wrapper.UnsignedIntVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.UnsignedIntVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _watvina_wrapper.UnsignedIntVector_size(self)

    def swap(self, v: "UnsignedIntVector") -> "void":
        return _watvina_wrapper.UnsignedIntVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _watvina_wrapper.UnsignedIntVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _watvina_wrapper.UnsignedIntVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _watvina_wrapper.UnsignedIntVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _watvina_wrapper.UnsignedIntVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.UnsignedIntVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _watvina_wrapper.UnsignedIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.UnsignedIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _watvina_wrapper.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.UnsignedIntVector_swiginit(self, _watvina_wrapper.new_UnsignedIntVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _watvina_wrapper.UnsignedIntVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _watvina_wrapper.UnsignedIntVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _watvina_wrapper.UnsignedIntVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _watvina_wrapper.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.UnsignedIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.UnsignedIntVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _watvina_wrapper.UnsignedIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _watvina_wrapper.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_UnsignedIntVector

# Register UnsignedIntVector in _watvina_wrapper:
_watvina_wrapper.UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _watvina_wrapper.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _watvina_wrapper.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _watvina_wrapper.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _watvina_wrapper.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _watvina_wrapper.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _watvina_wrapper.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _watvina_wrapper.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _watvina_wrapper.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _watvina_wrapper.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _watvina_wrapper.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _watvina_wrapper.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _watvina_wrapper.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _watvina_wrapper.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _watvina_wrapper.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.DoubleVector_swiginit(self, _watvina_wrapper.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _watvina_wrapper.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _watvina_wrapper.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _watvina_wrapper.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _watvina_wrapper.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _watvina_wrapper.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _watvina_wrapper.DoubleVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_DoubleVector

# Register DoubleVector in _watvina_wrapper:
_watvina_wrapper.DoubleVector_swigregister(DoubleVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.FloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.FloatVector___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _watvina_wrapper.FloatVector___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _watvina_wrapper.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.FloatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _watvina_wrapper.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _watvina_wrapper.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _watvina_wrapper.FloatVector_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _watvina_wrapper.FloatVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.FloatVector_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _watvina_wrapper.FloatVector_size(self)

    def swap(self, v: "FloatVector") -> "void":
        return _watvina_wrapper.FloatVector_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _watvina_wrapper.FloatVector_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _watvina_wrapper.FloatVector_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _watvina_wrapper.FloatVector_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _watvina_wrapper.FloatVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.FloatVector_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _watvina_wrapper.FloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.FloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _watvina_wrapper.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.FloatVector_swiginit(self, _watvina_wrapper.new_FloatVector(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _watvina_wrapper.FloatVector_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _watvina_wrapper.FloatVector_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _watvina_wrapper.FloatVector_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _watvina_wrapper.FloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.FloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.FloatVector_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _watvina_wrapper.FloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _watvina_wrapper.FloatVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_FloatVector

# Register FloatVector in _watvina_wrapper:
_watvina_wrapper.FloatVector_swigregister(FloatVector)

class FloatArrayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.FloatArrayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.FloatArrayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.FloatArrayVector___bool__(self)

    def __len__(self) -> "std::vector< std::array< float,3 > >::size_type":
        return _watvina_wrapper.FloatArrayVector___len__(self)

    def __getslice__(self, i: "std::vector< std::array< float,3 > >::difference_type", j: "std::vector< std::array< float,3 > >::difference_type") -> "std::vector< std::array< float,3 >,std::allocator< std::array< float,3 > > > *":
        return _watvina_wrapper.FloatArrayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::array< float,3 > >::difference_type", j: "std::vector< std::array< float,3 > >::difference_type") -> "void":
        return _watvina_wrapper.FloatArrayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::array< float,3 > >::value_type const &":
        return _watvina_wrapper.FloatArrayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::array< float,3 > >::value_type":
        return _watvina_wrapper.FloatArrayVector_pop(self)

    def append(self, x: "std::vector< std::array< float,3 > >::value_type const &") -> "void":
        return _watvina_wrapper.FloatArrayVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.FloatArrayVector_empty(self)

    def size(self) -> "std::vector< std::array< float,3 > >::size_type":
        return _watvina_wrapper.FloatArrayVector_size(self)

    def swap(self, v: "FloatArrayVector") -> "void":
        return _watvina_wrapper.FloatArrayVector_swap(self, v)

    def begin(self) -> "std::vector< std::array< float,3 > >::iterator":
        return _watvina_wrapper.FloatArrayVector_begin(self)

    def end(self) -> "std::vector< std::array< float,3 > >::iterator":
        return _watvina_wrapper.FloatArrayVector_end(self)

    def rbegin(self) -> "std::vector< std::array< float,3 > >::reverse_iterator":
        return _watvina_wrapper.FloatArrayVector_rbegin(self)

    def rend(self) -> "std::vector< std::array< float,3 > >::reverse_iterator":
        return _watvina_wrapper.FloatArrayVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.FloatArrayVector_clear(self)

    def get_allocator(self) -> "std::vector< std::array< float,3 > >::allocator_type":
        return _watvina_wrapper.FloatArrayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.FloatArrayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::array< float,3 > >::iterator":
        return _watvina_wrapper.FloatArrayVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.FloatArrayVector_swiginit(self, _watvina_wrapper.new_FloatArrayVector(*args))

    def push_back(self, x: "std::vector< std::array< float,3 > >::value_type const &") -> "void":
        return _watvina_wrapper.FloatArrayVector_push_back(self, x)

    def front(self) -> "std::vector< std::array< float,3 > >::value_type const &":
        return _watvina_wrapper.FloatArrayVector_front(self)

    def back(self) -> "std::vector< std::array< float,3 > >::value_type const &":
        return _watvina_wrapper.FloatArrayVector_back(self)

    def assign(self, n: "std::vector< std::array< float,3 > >::size_type", x: "std::vector< std::array< float,3 > >::value_type const &") -> "void":
        return _watvina_wrapper.FloatArrayVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::array< float,3 > >::size_type") -> "void":
        return _watvina_wrapper.FloatArrayVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::array< float,3 > >::size_type":
        return _watvina_wrapper.FloatArrayVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_FloatArrayVector

# Register FloatArrayVector in _watvina_wrapper:
_watvina_wrapper.FloatArrayVector_swigregister(FloatArrayVector)

class FloatArrayVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.FloatArrayVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.FloatArrayVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.FloatArrayVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::array< float,3 > > >::size_type":
        return _watvina_wrapper.FloatArrayVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::array< float,3 > > >::difference_type", j: "std::vector< std::vector< std::array< float,3 > > >::difference_type") -> "std::vector< std::vector< std::array< float,3 >,std::allocator< std::array< float,3 > > >,std::allocator< std::vector< std::array< float,3 >,std::allocator< std::array< float,3 > > > > > *":
        return _watvina_wrapper.FloatArrayVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::array< float,3 > > >::difference_type", j: "std::vector< std::vector< std::array< float,3 > > >::difference_type") -> "void":
        return _watvina_wrapper.FloatArrayVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::array< float,3 > > >::value_type const &":
        return _watvina_wrapper.FloatArrayVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::array< float,3 > > >::value_type":
        return _watvina_wrapper.FloatArrayVectorVector_pop(self)

    def append(self, x: "FloatArrayVector") -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.FloatArrayVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< std::array< float,3 > > >::size_type":
        return _watvina_wrapper.FloatArrayVectorVector_size(self)

    def swap(self, v: "FloatArrayVectorVector") -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::array< float,3 > > >::iterator":
        return _watvina_wrapper.FloatArrayVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< std::array< float,3 > > >::iterator":
        return _watvina_wrapper.FloatArrayVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::array< float,3 > > >::reverse_iterator":
        return _watvina_wrapper.FloatArrayVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::array< float,3 > > >::reverse_iterator":
        return _watvina_wrapper.FloatArrayVectorVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::array< float,3 > > >::allocator_type":
        return _watvina_wrapper.FloatArrayVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::array< float,3 > > >::iterator":
        return _watvina_wrapper.FloatArrayVectorVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.FloatArrayVectorVector_swiginit(self, _watvina_wrapper.new_FloatArrayVectorVector(*args))

    def push_back(self, x: "FloatArrayVector") -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::array< float,3 > > >::value_type const &":
        return _watvina_wrapper.FloatArrayVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< std::array< float,3 > > >::value_type const &":
        return _watvina_wrapper.FloatArrayVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< std::array< float,3 > > >::size_type", x: "FloatArrayVector") -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::array< float,3 > > >::size_type") -> "void":
        return _watvina_wrapper.FloatArrayVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::array< float,3 > > >::size_type":
        return _watvina_wrapper.FloatArrayVectorVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_FloatArrayVectorVector

# Register FloatArrayVectorVector in _watvina_wrapper:
_watvina_wrapper.FloatArrayVectorVector_swigregister(FloatArrayVectorVector)

class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.DoubleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.DoubleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _watvina_wrapper.DoubleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _watvina_wrapper.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _watvina_wrapper.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _watvina_wrapper.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _watvina_wrapper.DoubleVectorVector_pop(self)

    def append(self, x: "DoubleVector") -> "void":
        return _watvina_wrapper.DoubleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.DoubleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _watvina_wrapper.DoubleVectorVector_size(self)

    def swap(self, v: "DoubleVectorVector") -> "void":
        return _watvina_wrapper.DoubleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _watvina_wrapper.DoubleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _watvina_wrapper.DoubleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _watvina_wrapper.DoubleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _watvina_wrapper.DoubleVectorVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.DoubleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _watvina_wrapper.DoubleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.DoubleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _watvina_wrapper.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.DoubleVectorVector_swiginit(self, _watvina_wrapper.new_DoubleVectorVector(*args))

    def push_back(self, x: "DoubleVector") -> "void":
        return _watvina_wrapper.DoubleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _watvina_wrapper.DoubleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _watvina_wrapper.DoubleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "DoubleVector") -> "void":
        return _watvina_wrapper.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _watvina_wrapper.DoubleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _watvina_wrapper.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_DoubleVectorVector

# Register DoubleVectorVector in _watvina_wrapper:
_watvina_wrapper.DoubleVectorVector_swigregister(DoubleVectorVector)

class DoubleVectorVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.DoubleVectorVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.DoubleVectorVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.DoubleVectorVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _watvina_wrapper.DoubleVectorVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< double > > >::difference_type", j: "std::vector< std::vector< std::vector< double > > >::difference_type") -> "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *":
        return _watvina_wrapper.DoubleVectorVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< double > > >::difference_type", j: "std::vector< std::vector< std::vector< double > > >::difference_type") -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _watvina_wrapper.DoubleVectorVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< double > > >::value_type":
        return _watvina_wrapper.DoubleVectorVectorVector_pop(self)

    def append(self, x: "DoubleVectorVector") -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.DoubleVectorVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _watvina_wrapper.DoubleVectorVectorVector_size(self)

    def swap(self, v: "DoubleVectorVectorVector") -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _watvina_wrapper.DoubleVectorVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _watvina_wrapper.DoubleVectorVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< double > > >::reverse_iterator":
        return _watvina_wrapper.DoubleVectorVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< double > > >::reverse_iterator":
        return _watvina_wrapper.DoubleVectorVectorVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< double > > >::allocator_type":
        return _watvina_wrapper.DoubleVectorVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _watvina_wrapper.DoubleVectorVectorVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.DoubleVectorVectorVector_swiginit(self, _watvina_wrapper.new_DoubleVectorVectorVector(*args))

    def push_back(self, x: "DoubleVectorVector") -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _watvina_wrapper.DoubleVectorVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _watvina_wrapper.DoubleVectorVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< double > > >::size_type", x: "DoubleVectorVector") -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< double > > >::size_type") -> "void":
        return _watvina_wrapper.DoubleVectorVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _watvina_wrapper.DoubleVectorVectorVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_DoubleVectorVectorVector

# Register DoubleVectorVectorVector in _watvina_wrapper:
_watvina_wrapper.DoubleVectorVectorVector_swigregister(DoubleVectorVectorVector)

class DoubleArrayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.DoubleArrayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.DoubleArrayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.DoubleArrayVector___bool__(self)

    def __len__(self) -> "std::vector< std::array< double,3 > >::size_type":
        return _watvina_wrapper.DoubleArrayVector___len__(self)

    def __getslice__(self, i: "std::vector< std::array< double,3 > >::difference_type", j: "std::vector< std::array< double,3 > >::difference_type") -> "std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *":
        return _watvina_wrapper.DoubleArrayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::array< double,3 > >::difference_type", j: "std::vector< std::array< double,3 > >::difference_type") -> "void":
        return _watvina_wrapper.DoubleArrayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::array< double,3 > >::value_type const &":
        return _watvina_wrapper.DoubleArrayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::array< double,3 > >::value_type":
        return _watvina_wrapper.DoubleArrayVector_pop(self)

    def append(self, x: "std::vector< std::array< double,3 > >::value_type const &") -> "void":
        return _watvina_wrapper.DoubleArrayVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.DoubleArrayVector_empty(self)

    def size(self) -> "std::vector< std::array< double,3 > >::size_type":
        return _watvina_wrapper.DoubleArrayVector_size(self)

    def swap(self, v: "DoubleArrayVector") -> "void":
        return _watvina_wrapper.DoubleArrayVector_swap(self, v)

    def begin(self) -> "std::vector< std::array< double,3 > >::iterator":
        return _watvina_wrapper.DoubleArrayVector_begin(self)

    def end(self) -> "std::vector< std::array< double,3 > >::iterator":
        return _watvina_wrapper.DoubleArrayVector_end(self)

    def rbegin(self) -> "std::vector< std::array< double,3 > >::reverse_iterator":
        return _watvina_wrapper.DoubleArrayVector_rbegin(self)

    def rend(self) -> "std::vector< std::array< double,3 > >::reverse_iterator":
        return _watvina_wrapper.DoubleArrayVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.DoubleArrayVector_clear(self)

    def get_allocator(self) -> "std::vector< std::array< double,3 > >::allocator_type":
        return _watvina_wrapper.DoubleArrayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.DoubleArrayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::array< double,3 > >::iterator":
        return _watvina_wrapper.DoubleArrayVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.DoubleArrayVector_swiginit(self, _watvina_wrapper.new_DoubleArrayVector(*args))

    def push_back(self, x: "std::vector< std::array< double,3 > >::value_type const &") -> "void":
        return _watvina_wrapper.DoubleArrayVector_push_back(self, x)

    def front(self) -> "std::vector< std::array< double,3 > >::value_type const &":
        return _watvina_wrapper.DoubleArrayVector_front(self)

    def back(self) -> "std::vector< std::array< double,3 > >::value_type const &":
        return _watvina_wrapper.DoubleArrayVector_back(self)

    def assign(self, n: "std::vector< std::array< double,3 > >::size_type", x: "std::vector< std::array< double,3 > >::value_type const &") -> "void":
        return _watvina_wrapper.DoubleArrayVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::array< double,3 > >::size_type") -> "void":
        return _watvina_wrapper.DoubleArrayVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::array< double,3 > >::size_type":
        return _watvina_wrapper.DoubleArrayVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_DoubleArrayVector

# Register DoubleArrayVector in _watvina_wrapper:
_watvina_wrapper.DoubleArrayVector_swigregister(DoubleArrayVector)

class DoubleArrayVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.DoubleArrayVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.DoubleArrayVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.DoubleArrayVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::array< double,3 > > >::size_type":
        return _watvina_wrapper.DoubleArrayVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::array< double,3 > > >::difference_type", j: "std::vector< std::vector< std::array< double,3 > > >::difference_type") -> "std::vector< std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >,std::allocator< std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > > > *":
        return _watvina_wrapper.DoubleArrayVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::array< double,3 > > >::difference_type", j: "std::vector< std::vector< std::array< double,3 > > >::difference_type") -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::array< double,3 > > >::value_type const &":
        return _watvina_wrapper.DoubleArrayVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::array< double,3 > > >::value_type":
        return _watvina_wrapper.DoubleArrayVectorVector_pop(self)

    def append(self, x: "DoubleArrayVector") -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.DoubleArrayVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< std::array< double,3 > > >::size_type":
        return _watvina_wrapper.DoubleArrayVectorVector_size(self)

    def swap(self, v: "DoubleArrayVectorVector") -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::array< double,3 > > >::iterator":
        return _watvina_wrapper.DoubleArrayVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< std::array< double,3 > > >::iterator":
        return _watvina_wrapper.DoubleArrayVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::array< double,3 > > >::reverse_iterator":
        return _watvina_wrapper.DoubleArrayVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::array< double,3 > > >::reverse_iterator":
        return _watvina_wrapper.DoubleArrayVectorVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::array< double,3 > > >::allocator_type":
        return _watvina_wrapper.DoubleArrayVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::array< double,3 > > >::iterator":
        return _watvina_wrapper.DoubleArrayVectorVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.DoubleArrayVectorVector_swiginit(self, _watvina_wrapper.new_DoubleArrayVectorVector(*args))

    def push_back(self, x: "DoubleArrayVector") -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::array< double,3 > > >::value_type const &":
        return _watvina_wrapper.DoubleArrayVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< std::array< double,3 > > >::value_type const &":
        return _watvina_wrapper.DoubleArrayVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< std::array< double,3 > > >::size_type", x: "DoubleArrayVector") -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::array< double,3 > > >::size_type") -> "void":
        return _watvina_wrapper.DoubleArrayVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::array< double,3 > > >::size_type":
        return _watvina_wrapper.DoubleArrayVectorVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_DoubleArrayVectorVector

# Register DoubleArrayVectorVector in _watvina_wrapper:
_watvina_wrapper.DoubleArrayVectorVector_swigregister(DoubleArrayVectorVector)

class FloatVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.FloatVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.FloatVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.FloatVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        return _watvina_wrapper.FloatVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        return _watvina_wrapper.FloatVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "void":
        return _watvina_wrapper.FloatVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        return _watvina_wrapper.FloatVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        return _watvina_wrapper.FloatVectorVector_pop(self)

    def append(self, x: "FloatVector") -> "void":
        return _watvina_wrapper.FloatVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.FloatVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< float > >::size_type":
        return _watvina_wrapper.FloatVectorVector_size(self)

    def swap(self, v: "FloatVectorVector") -> "void":
        return _watvina_wrapper.FloatVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        return _watvina_wrapper.FloatVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< float > >::iterator":
        return _watvina_wrapper.FloatVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _watvina_wrapper.FloatVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _watvina_wrapper.FloatVectorVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.FloatVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        return _watvina_wrapper.FloatVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.FloatVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        return _watvina_wrapper.FloatVectorVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.FloatVectorVector_swiginit(self, _watvina_wrapper.new_FloatVectorVector(*args))

    def push_back(self, x: "FloatVector") -> "void":
        return _watvina_wrapper.FloatVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _watvina_wrapper.FloatVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _watvina_wrapper.FloatVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< float > >::size_type", x: "FloatVector") -> "void":
        return _watvina_wrapper.FloatVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< float > >::size_type") -> "void":
        return _watvina_wrapper.FloatVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        return _watvina_wrapper.FloatVectorVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_FloatVectorVector

# Register FloatVectorVector in _watvina_wrapper:
_watvina_wrapper.FloatVectorVector_swigregister(FloatVectorVector)

class FloatVectorVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.FloatVectorVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.FloatVectorVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.FloatVectorVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _watvina_wrapper.FloatVectorVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< float > > >::difference_type", j: "std::vector< std::vector< std::vector< float > > >::difference_type") -> "std::vector< std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >,std::allocator< std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > > > *":
        return _watvina_wrapper.FloatVectorVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< float > > >::difference_type", j: "std::vector< std::vector< std::vector< float > > >::difference_type") -> "void":
        return _watvina_wrapper.FloatVectorVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _watvina_wrapper.FloatVectorVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< float > > >::value_type":
        return _watvina_wrapper.FloatVectorVectorVector_pop(self)

    def append(self, x: "FloatVectorVector") -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.FloatVectorVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _watvina_wrapper.FloatVectorVectorVector_size(self)

    def swap(self, v: "FloatVectorVectorVector") -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _watvina_wrapper.FloatVectorVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _watvina_wrapper.FloatVectorVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< float > > >::reverse_iterator":
        return _watvina_wrapper.FloatVectorVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< float > > >::reverse_iterator":
        return _watvina_wrapper.FloatVectorVectorVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< float > > >::allocator_type":
        return _watvina_wrapper.FloatVectorVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _watvina_wrapper.FloatVectorVectorVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.FloatVectorVectorVector_swiginit(self, _watvina_wrapper.new_FloatVectorVectorVector(*args))

    def push_back(self, x: "FloatVectorVector") -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _watvina_wrapper.FloatVectorVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _watvina_wrapper.FloatVectorVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< float > > >::size_type", x: "FloatVectorVector") -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< float > > >::size_type") -> "void":
        return _watvina_wrapper.FloatVectorVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _watvina_wrapper.FloatVectorVectorVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_FloatVectorVectorVector

# Register FloatVectorVectorVector in _watvina_wrapper:
_watvina_wrapper.FloatVectorVectorVector_swigregister(FloatVectorVectorVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _watvina_wrapper.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _watvina_wrapper.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _watvina_wrapper.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _watvina_wrapper.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _watvina_wrapper.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _watvina_wrapper.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _watvina_wrapper.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _watvina_wrapper.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _watvina_wrapper.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _watvina_wrapper.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _watvina_wrapper.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _watvina_wrapper.StringVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _watvina_wrapper.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _watvina_wrapper.StringVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.StringVector_swiginit(self, _watvina_wrapper.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _watvina_wrapper.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _watvina_wrapper.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _watvina_wrapper.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _watvina_wrapper.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _watvina_wrapper.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _watvina_wrapper.StringVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_StringVector

# Register StringVector in _watvina_wrapper:
_watvina_wrapper.StringVector_swigregister(StringVector)

class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _watvina_wrapper.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _watvina_wrapper.ConstCharVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _watvina_wrapper.ConstCharVector___bool__(self)

    def __len__(self) -> "std::vector< char const * >::size_type":
        return _watvina_wrapper.ConstCharVector___len__(self)

    def __getslice__(self, i: "std::vector< char const * >::difference_type", j: "std::vector< char const * >::difference_type") -> "std::vector< char const *,std::allocator< char const * > > *":
        return _watvina_wrapper.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _watvina_wrapper.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< char const * >::difference_type", j: "std::vector< char const * >::difference_type") -> "void":
        return _watvina_wrapper.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _watvina_wrapper.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< char const * >::value_type":
        return _watvina_wrapper.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _watvina_wrapper.ConstCharVector___setitem__(self, *args)

    def pop(self) -> "std::vector< char const * >::value_type":
        return _watvina_wrapper.ConstCharVector_pop(self)

    def append(self, x: "std::vector< char const * >::value_type") -> "void":
        return _watvina_wrapper.ConstCharVector_append(self, x)

    def empty(self) -> "bool":
        return _watvina_wrapper.ConstCharVector_empty(self)

    def size(self) -> "std::vector< char const * >::size_type":
        return _watvina_wrapper.ConstCharVector_size(self)

    def swap(self, v: "ConstCharVector") -> "void":
        return _watvina_wrapper.ConstCharVector_swap(self, v)

    def begin(self) -> "std::vector< char const * >::iterator":
        return _watvina_wrapper.ConstCharVector_begin(self)

    def end(self) -> "std::vector< char const * >::iterator":
        return _watvina_wrapper.ConstCharVector_end(self)

    def rbegin(self) -> "std::vector< char const * >::reverse_iterator":
        return _watvina_wrapper.ConstCharVector_rbegin(self)

    def rend(self) -> "std::vector< char const * >::reverse_iterator":
        return _watvina_wrapper.ConstCharVector_rend(self)

    def clear(self) -> "void":
        return _watvina_wrapper.ConstCharVector_clear(self)

    def get_allocator(self) -> "std::vector< char const * >::allocator_type":
        return _watvina_wrapper.ConstCharVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _watvina_wrapper.ConstCharVector_pop_back(self)

    def erase(self, *args) -> "std::vector< char const * >::iterator":
        return _watvina_wrapper.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _watvina_wrapper.ConstCharVector_swiginit(self, _watvina_wrapper.new_ConstCharVector(*args))

    def push_back(self, x: "std::vector< char const * >::value_type") -> "void":
        return _watvina_wrapper.ConstCharVector_push_back(self, x)

    def front(self) -> "std::vector< char const * >::value_type":
        return _watvina_wrapper.ConstCharVector_front(self)

    def back(self) -> "std::vector< char const * >::value_type":
        return _watvina_wrapper.ConstCharVector_back(self)

    def assign(self, n: "std::vector< char const * >::size_type", x: "std::vector< char const * >::value_type") -> "void":
        return _watvina_wrapper.ConstCharVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _watvina_wrapper.ConstCharVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _watvina_wrapper.ConstCharVector_insert(self, *args)

    def reserve(self, n: "std::vector< char const * >::size_type") -> "void":
        return _watvina_wrapper.ConstCharVector_reserve(self, n)

    def capacity(self) -> "std::vector< char const * >::size_type":
        return _watvina_wrapper.ConstCharVector_capacity(self)
    __swig_destroy__ = _watvina_wrapper.delete_ConstCharVector

# Register ConstCharVector in _watvina_wrapper:
_watvina_wrapper.ConstCharVector_swigregister(ConstCharVector)

class WATVina(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cpu: "int"=0, seed: "int"=0, verbosity: "int"=1):
        _watvina_wrapper.WATVina_swiginit(self, _watvina_wrapper.new_WATVina(cpu, seed, verbosity))
    __swig_destroy__ = _watvina_wrapper.delete_WATVina

    def cite(self) -> "void":
        return _watvina_wrapper.WATVina_cite(self)

    def seed(self) -> "int":
        return _watvina_wrapper.WATVina_seed(self)

    def set_receptor(self, *args) -> "void":
        return _watvina_wrapper.WATVina_set_receptor(self, *args)

    def set_receptor_from_string(self, *args) -> "void":
        return _watvina_wrapper.WATVina_set_receptor_from_string(self, *args)

    def set_water(self, implicitsol: "bool const", water_file: "std::string const &") -> "void":
        return _watvina_wrapper.WATVina_set_water(self, implicitsol, water_file)

    def set_ligand_from_file(self, ligand_names: "std::string const &") -> "void":
        return _watvina_wrapper.WATVina_set_ligand_from_file(self, ligand_names)

    def set_ligand_from_string(self, ligand_content: "std::string const &") -> "void":
        return _watvina_wrapper.WATVina_set_ligand_from_string(self, ligand_content)

    def set_pharmacophore_from_file(self, pharmac_name: "std::string const &") -> "void":
        return _watvina_wrapper.WATVina_set_pharmacophore_from_file(self, pharmac_name)

    def set_extra_constraints(self, weight_desol: "float"=-0.500, wclash_dist: "float"=0.500, weight_torsion: "float"=0.300) -> "void":
        return _watvina_wrapper.WATVina_set_extra_constraints(self, weight_desol, wclash_dist, weight_torsion)

    def set_watvina_weights(self, weight_vdw: "float"=0.19, weight_hb: "float"=0.80, weight_elep: "float"=0.14) -> "void":
        return _watvina_wrapper.WATVina_set_watvina_weights(self, weight_vdw, weight_hb, weight_elep)

    def set_grid_dims(self, center_x: "float", center_y: "float", center_z: "float", size_x: "float", size_y: "float", size_z: "float", granularity: "float"=0.375, force_even_voxels: "bool"=False) -> "void":
        return _watvina_wrapper.WATVina_set_grid_dims(self, center_x, center_y, center_z, size_x, size_y, size_z, granularity, force_even_voxels)

    def set_precalculate_sf(self, prec_full_atomtypes: "bool"=False) -> "void":
        return _watvina_wrapper.WATVina_set_precalculate_sf(self, prec_full_atomtypes)

    def compute_watvina_maps(self) -> "void":
        return _watvina_wrapper.WATVina_compute_watvina_maps(self)

    def randomize(self, out_name: "std::string const &", max_steps: "int const", seed: "int const") -> "void":
        return _watvina_wrapper.WATVina_randomize(self, out_name, max_steps, seed)

    def score(self) -> "float":
        return _watvina_wrapper.WATVina_score(self)

    def relax_structure(self, relax_steps: "int const"=10000, tramplitude: "float const"=0.100, rotamplitude: "float const"=1.00) -> "void":
        return _watvina_wrapper.WATVina_relax_structure(self, relax_steps, tramplitude, rotamplitude)

    def optimize(self, max_steps: "int const"=100, meta_factor: "float const"=1.00) -> "float":
        return _watvina_wrapper.WATVina_optimize(self, max_steps, meta_factor)

    def global_search(self, exhaustiveness: "int const"=8, n_poses: "int const"=10, min_rmsd: "float const"=1.500, energy_range: "float const"=3.000, population_size: "int const"=8, ga_searching: "int const"=4, refinement: "bool const"=True, meta_factor: "float const"=1.00) -> "void":
        return _watvina_wrapper.WATVina_global_search(self, exhaustiveness, n_poses, min_rmsd, energy_range, population_size, ga_searching, refinement, meta_factor)
    pose_atomids = property(_watvina_wrapper.WATVina_pose_atomids_get, _watvina_wrapper.WATVina_pose_atomids_set)
    poses_coords = property(_watvina_wrapper.WATVina_poses_coords_get, _watvina_wrapper.WATVina_poses_coords_set)
    poses_score = property(_watvina_wrapper.WATVina_poses_score_get, _watvina_wrapper.WATVina_poses_score_set)
    poses_rmsdbest = property(_watvina_wrapper.WATVina_poses_rmsdbest_get, _watvina_wrapper.WATVina_poses_rmsdbest_set)
    poses_rmsdinit = property(_watvina_wrapper.WATVina_poses_rmsdinit_get, _watvina_wrapper.WATVina_poses_rmsdinit_set)
    poses_vdw = property(_watvina_wrapper.WATVina_poses_vdw_get, _watvina_wrapper.WATVina_poses_vdw_set)
    poses_hbond = property(_watvina_wrapper.WATVina_poses_hbond_get, _watvina_wrapper.WATVina_poses_hbond_set)
    poses_electrop = property(_watvina_wrapper.WATVina_poses_electrop_get, _watvina_wrapper.WATVina_poses_electrop_set)
    poses_desol = property(_watvina_wrapper.WATVina_poses_desol_get, _watvina_wrapper.WATVina_poses_desol_set)
    poses_intra = property(_watvina_wrapper.WATVina_poses_intra_get, _watvina_wrapper.WATVina_poses_intra_set)
    poses_torsion = property(_watvina_wrapper.WATVina_poses_torsion_get, _watvina_wrapper.WATVina_poses_torsion_set)
    poses_pharma = property(_watvina_wrapper.WATVina_poses_pharma_get, _watvina_wrapper.WATVina_poses_pharma_set)

    def write_poses(self, output_name: "std::string const &", how_many: "std::size_t"=9) -> "void":
        return _watvina_wrapper.WATVina_write_poses(self, output_name, how_many)

# Register WATVina in _watvina_wrapper:
_watvina_wrapper.WATVina_swigregister(WATVina)



